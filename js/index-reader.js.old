var /* filereader = new FileReader,  */
sdcard = navigator.getDeviceStorage('sdcard'), 
libraryscanner, 
starttime,
librarylocation = pathprefix + '/',
librarydata = {},
mdataWating = [0,0],
letters = [],
libraryscannernum = 0,
hidden = location.hash.substr(1) === 'hidden';

beginscan();
if(hidden){eid('hiddentitlebadge').classList.remove('hidden');}

function beginscan() {
    blanklibraryout('Loading!');
    starttime = new Date();

    libraryscanner = sdcard.enumerate(librarylocation);
    libraryscanner.onsuccess = function(){
        if(libraryscanner.result) {

            var fname = libraryscanner.result.name.substr(libraryscanner.result.name.indexOf(librarylocation) + librarylocation.length);
            if(fname.indexOf('/') === 0) {fname = fname.substr(1)} //remove extra '/'
            if(fname.indexOf('/') > -1) { //if not a subfolder
                var ldAccessname = fname.substring(0,fname.indexOf('/'));
                if(!(ldAccessname in librarydata)) {librarydata[ldAccessname] = {
                    'name': ldAccessname,
                    'displayname': ldAccessname,
                    'sortname': ldAccessname,
                    'cover': false,
                    'hidden': false
                };} //make the object if not in ld

                //should be the chapter number now
                var chnum = fname.substr(ldAccessname.length + 1); //cut out bookname + 1 for '/'
                //console.log(chnum);
                //check if its a folder and not a file
                if(chnum.indexOf('/') < chnum.lastIndexOf('.') && chnum.indexOf('/') !== -1) {
                    //is folder
                    //console.log('detected folder');

                    chnum = Number(chnum.substring(0,chnum.indexOf('/')));
                    if(
                        isFinite(chnum) &&
                        !isNaN(chnum)
                    ) {
                        if(librarydata[ldAccessname].chapters.indexOf(chnum) === -1){
                            if(libraryscanner.result.type.indexOf('image') > -1) { //if this is an image. 
                                //if there is a directory filled with not images, dont count it as a chapter
                                librarydata[ldAccessname].chapters.push(chnum);
                            }
                        }
                    }
                } else { //is file (from folder check)
                    // !! WE DIDN'T CONVERT IT TO NUMBER HERE !!

                    //check if is image
                    if(libraryscanner.result.type.indexOf('image') > -1) {
                        if(chnum.substring(0,chnum.lastIndexOf('.')).toLowerCase() === 'cover') {
                            librarydata[ldAccessname].cover = libraryscanner.result;
                            //chnum.substring(0,chnum.lastIndexOf('.'))
                        }
                    } else if( //basically if it ends in cbz
                        chnum.substring(
                            chnum.lastIndexOf('.') - 
                            chnum.length + 1 /* +1 bc length dont start at 0 */
                        ).toLowerCase().indexOf('cbz') > -1
                        ) {
                        //so this is an archive
                        //note: we cannot check the type bc kaios does not know about comic book archives
                        //also we only support zip variant 

                        chnum = Number(chnum.substring(0,chnum.indexOf('.'))); //reuse code gang
                        if(
                            isFinite(chnum) &&
                            !isNaN(chnum)
                        ) {
                            if(librarydata[ldAccessname].chapters.indexOf(chnum) === -1){ 
                                //note:
                                //we can put duplicate entries in the chapterlist
                                //because there can be folder and archive version
                                //not here tho because they are still one chapter
                                //so only count as one chapter here.

                                //get it?

                                librarydata[ldAccessname].chapters.push(chnum);
                                //console.log('cbz archive found, but didnt do anything.');
                            }
                        }
                    } else {
                        switch(chnum.toLowerCase()) {
                            case 'r18':
                            case 'r18.txt':
                            case 'hidden':
                            case 'hidden.txt':
                                //detected file called 'hidden' or 'hidden', signifies this is adult contnet
                                librarydata[ldAccessname].hidden = true;
                                break;

                            case 'metadata':
                            case 'metadata.json':
                            case 'metadata.txt':
                                var tfr = new FileReader();
                                tfr.readAsText(libraryscanner.result);
                                mdataWating[0]++;
                                tfr.onload = () => {
                                    frb: {

                                        var mdataProps;
                                        try {
                                            mdataProps = JSON.parse(tfr.result);
                                        } catch(e) {
                                            console.error(e);
                                            break frb;
                                        }

                                        if('sortname' in mdataProps) {
                                            librarydata[ldAccessname].sortname = mdataProps.sortname;
                                        }

                                        if('name' in mdataProps) {
                                            librarydata[ldAccessname].displayname = mdataProps.name;
                                        }

                                        if('author' in mdataProps) {
                                            librarydata[ldAccessname].author = mdataProps.author;
                                        }
                                    }
                                    mdataWating[1]++;
                                    if(
                                        mdataWating[0] === mdataWating[1] &&
                                        libraryscanner.done
                                    ) {
                                        parseld();
                                    }
                                    //libraryscanner.continue();
                                    //continueReading = false;
                                };
                                break;
                            
                        }
                    }

                }
            }

            blanklibraryout('Loading! ' + ++libraryscannernum + ' files found!');
            //eid('librarycont').innerHTML = 'Loading: ' + Object.keys(librarydata).length + ' works found...';


            libraryscanner.continue();
        } else {
            //done?
            if(mdataWating[0] === mdataWating[1]) {
                parseld();
            } else {
                blanklibraryout('Loading! Waiting for metadata reading...');
            }
        }
    }

    libraryscanner.onerror = function(){
        switch(libraryscanner.error.name) {
            case 'SecurityError':
                blanklibraryout('You need to give access to your storage area!<p>Go to your System Settings, then App Permissions, then enable storage access for sequiviewer.');
                break;
            case 'NotFoundError':
                blanklibraryout('The "' + pathprefix + '" folder was not found!<p>Refer to the tutorial and website for more details.');
                break;
        }
    }
}

function parseld() {
    eid('librarycont').innerHTML = '';
    var libraryels = [];
    for(var bk of Object.keys(librarydata)) {
        var proceed = true;

        if(librarydata[bk].hidden !== hidden) {
            proceed = false;
        }

        if(proceed) {
            var litm = document.createElement('div');
            litm.dataset.name = librarydata[bk].sortname;
            litm.dataset.targetname = bk;
            //litm.setAttribute('data-name',bk);
            litm.setAttribute('class','libraryitem');
            litm.setAttribute('tabindex',-1);
            
            /* var hiddenbd = '';
            if(librarydata[bk].hidden) {
                hiddenbd = '<div class="hiddenbadge">Hidden</div>';
            } */

            var icon, cover;
            if(librarydata[bk].cover) {
                icon = URL.createObjectURL(librarydata[bk].cover);
                cover = icon;
            } else {
                if(librarydata[bk].hidden) {
                    icon = 'img/hidden-icon-placeholder.png';
                    cover = 'img/hidden-cover-placeholder.png';
                } else {
                    icon = 'img/icon-placeholder.png';
                    cover = 'img/cover-placeholder.png';
                }
            }

            /* var descriptiontmp = '<i>No description available.</i>';
            if("description" in thing.metadata) {
                descriptiontmp = thing.metadata.description;
            } */

            //are you ready for a very long string?
            litm.innerHTML = '<img src="' + icon + '" class="icon" /><img src="' + cover + '" class="cover" /><span class="title">' + librarydata[bk].displayname + '</span><div class="description">' + librarydata[bk].chapters.length + ' chapters available</div>'/*  + hiddenbd */;
            libraryels.push(litm);
            //eid('librarycont').appendChild(litm);
            }
        }

        libraryels.sort((a,b) => {
            return new Intl.Collator(['en-US','ja-JP','zh-CN']).compare(a.dataset.name, b.dataset.name);

            /* if(a.dataset.name < b.dataset.name){return -1}
            if(a.dataset.name > b.dataset.name){return 1}
            return 0; */
        });

        //console.log(`length: $(libraryels.length)`);
        for(var i = 0; i < libraryels.length; i++) {
            //console.log(i);
            var ltr = libraryels[i].dataset.name.substr(0,1).toLowerCase();
            if(letters.map((l) => {return l.letter}).indexOf(ltr) === -1) {
                letters.push({
                    letter: ltr,
                    index: i
                });
            }

            eid('librarycont').appendChild(libraryels[i]);
        }

/*         libraryels.forEach(element => {
            eid('librarycont').appendChild(element);
        });
 */ 

    //finish up
    libitem = ecn('libraryitem');
    libitemcur = 0;
    if(libitem.length === 0) {
        blanklibraryout('No works found.');
    } else {
        window.addEventListener('focus',function(){libitem[libitemcur].focus();});
        libitem[libitemcur].focus();

        eid('header-subtitle-info').textContent = `read ${libraryscannernum} files in ${((new Date() - starttime) / 1000).toFixed(2)}s`;
        eid('header-subtitle-default').classList.add('hidden');
        eid('header-subtitle-info').classList.remove('hidden');

        setTimeout(function(){
            eid('header-subtitle-default').classList.remove('hidden');
            eid('header-subtitle-info').classList.add('hidden');
        },5000);

        if(hidden) {
            toastmsg('Hidden works are currently visible - 718 to hide.',{bg:'#f00',time:3000});
        }
    }
    
    //cleanup
    starttime = undefined;
    libraryscannernum = undefined;
    libraryscanner = undefined;
    librarydata = undefined;
}

function blanklibraryout(text) {
    eid('librarycont').innerHTML = '<div class="screencenter">' + text + '</div>';
}